<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Load panorama -->


  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/hotspot_direction_user_defaultpoint5.png"
         visible="false"
         edge="center"
         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"


         />
  <action name="onhoverIconLoadpanorama">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>



<!-- ********** -->
<!-- Double Click -->
<!-- id : doubleclick -->
<!-- ********** -->
  <events name="doubleclick_events" keep="true" ondoubleclick="doubleclick_ondoubleclick"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>
<!-- ********** -->
<!-- Context menu -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="false">
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
    <item name="vrmodeentry" onclick="if(scene[get(xml.scene)].full360,
    js(accessWebVr(get(xml.scene),get(videoscenestarttime)));
,
    js(accessWebVr(null));
);" />
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
    if (device.html5 AND tour_vrdevices,
      getmessage(contextmenu.item[vrmodeentry].caption, contextmenuopenVrLabel);
      set(contextmenu.item[vrmodeentry].onclick, if(scene[get(xml.scene)].full360,
    js(accessWebVr(get(xml.scene),get(videoscenestarttime)));
,
    js(accessWebVr(null));
););
     ,
      set(contextmenu.item[vrmodeentry].visible, false);
    );
  </action>

<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->


<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    if(scene[get(xml.scene)].full360,
      set(sceneisfull360, false);
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
      if (sceneisfull360,
        set(plugin[gyroscope].camroll, true);
      ,
        set(plugin[gyroscope].camroll, false);
      );
    ,
      set(plugin[gyroscope].camroll, false);
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      if(%1,
        set(plugin[gyroscope].activated,true);
      ,
        set(plugin[gyroscope].activated,false);
      );
      if (%1 != plugin[gyroscope].enabled,
        if(plugin[gyroscope].activated,
          switch(plugin[gyroscope].enabled);
        ,
          set(plugin[gyroscope].enabled, false);
        );
        if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      
      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

<!-- ********** -->
<!-- D-pad Control Bar -->
<!-- id : controlBar_dpad -->
<!-- ********** -->

<krpano controlBar_dpadbarbuilt="false" controlBar_dpadhorizontalwidth="0" controlBar_dpadverticalheight="0" controlBar_dpadIsOpened="false" />

<events name="controlBar_dpadevents" 
	onxmlcomplete="controlBar_dpadbuildMenuBar();" 

	openvideointerface="controlBar_dpadHideControlBar();"
	closevideointerface="controlBar_dpadShowControlBar();"

	keep="true" />


<action name="controlBar_dpadHideControlBar">
	set(layer[controlBar_dpadmenu_vertical_bg].visible, false);
	set(layer[controlBar_dpadmenu_vertical_bg_border].visible, false);
	set(layer[controlBar_dpadmenu_horizontal_bg].visible, false);
	set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, false);
	set(layer[controlBar_dpadnavigation_bg_border].visible, false);
	set(layer[controlBar_dpadnavigation_bg].visible, false);
	set(layer[controlBar_dpadnavigation_bg_border].alpha, 0.5);
</action>
<action name="controlBar_dpadShowControlBar">
	if(controlBar_dpadIsOpened,
		set(layer[controlBar_dpadmenu_vertical_bg].visible, true);
		set(layer[controlBar_dpadmenu_vertical_bg_border].visible, true);
		set(layer[controlBar_dpadmenu_horizontal_bg].visible, true);
		set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, true);
	);
	set(layer[controlBar_dpadnavigation_bg].visible, true);
	set(layer[controlBar_dpadnavigation_bg_border].visible, true);
	set(layer[controlBar_dpadnavigation_bg_border].alpha, 1);
</action>

<action name="controlBar_dpadbuildMenuBar">
	ifnot (controlBar_dpadbarbuilt, controlBar_dpadbuildMenu(); set(controlBar_dpadbarbuilt, true););
</action>

<action name="controlBar_dpadbuildMenu">
	
	
	
	set(controlBar_dpadbutton_pos, 10);


	if(plugin[ptpvrmode] AND device.html5,
		set(layer[controlBar_dpadbtn_enter_vr].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_enter_vr_not].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	);


		if (device.fullscreensupport,
			set(layer[controlBar_dpadbtn_openfs].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_closefs].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
	

		if(plugin[gyroscope],
			set(controlBar_dpadDisplayGyroscopeButton, false);
			if (device.tablet, set(controlBar_dpadDisplayGyroscopeButton, true););
			if (device.mobile, set(controlBar_dpadDisplayGyroscopeButton, true););
			if(controlBar_dpadDisplayGyroscopeButton,
				set(layer[controlBar_dpadbtn_gyroscope_on].y, get(controlBar_dpadbutton_pos));
				set(layer[controlBar_dpadbtn_gyroscope_off].y, get(controlBar_dpadbutton_pos));
				set(layer[controlBar_dpadbtn_gyroscope_not].y, get(controlBar_dpadbutton_pos));
				inc(controlBar_dpadbutton_pos, 40);
			);
		);

	
	
	

	

	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_vertical_bg].height, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadverticalheight, get(controlBar_dpadbutton_pos));


	,
		set(layer[controlBar_dpadmenu_vertical_bg].height, 0);
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, 0);


	);
	
	
	
	set(controlBar_dpadbutton_pos, 10);
	
	
	


	
	
	

	
	
	

	
	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadhorizontalwidth, get(controlBar_dpadbutton_pos));
	,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, 0);
	);
	
	
	
	
</action>


<events name="controlBar_dpadStartTourEvents" onTourStart="controlBar_dpadCallOnStartTour();" keep="true" />

<action name="controlBar_dpadCallOnStartTour">
	
	controlBar_dpadshowMenuControls();
</action>




<style name="controlBar_dpadbtn_vertical_style"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	crop="0|0|30|30"
	onovercrop="0|30|30|30"
	ondowncrop="0|60|30|30"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_off"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.2"
	devices="desktop"
	/>
<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.5"
	devices="tablet.or.mobile"
	/>

<layer name="controlBar_dpadmenu_vertical_bg"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_vertical.png"
	keep="true"
	align="bottomright"
	x="54"
	y="108"
	edge="bottom"
	zorder="4"
	scale9grid="12|10|3|40"
	style="controlBar_dpadmenu_bg_alpha"
	visible="false"
	/>

<layer name="controlBar_dpadmenu_vertical_bg_border"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_vertical.png"
	keep="true"
	align="bottomright"
	x="54"
	y="108"
	edge="bottom"
	zorder="5"
	scale9grid="12|10|3|40"
	onout="controlBar_dpadvertical_onout_action();"
	onover="controlBar_dpadvertical_onover_action();"
	visible="false"
	>




  <layer name="controlBar_dpadbtn_openfs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_enter_fs.png"
          onclick="enterFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadopenFsTip"
          visible="false"
          devices="fullscreensupport"
          />
  <layer name="controlBar_dpadbtn_closefs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_close_fs.png"
          onclick="exitFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadcloseFsTip"
          devices="fullscreensupport"
          />


  <layer name="controlBar_dpadbtn_enter_vr"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_vr_mode.png"
          onclick="if(scene[get(xml.scene)].full360,
    js(accessWebVr(get(xml.scene),get(videoscenestarttime)));
,
    js(accessWebVr(null));
);"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadenterVRTip"
          visible="false"
          devices="html5"
          />
    <layer name="controlBar_dpadbtn_enter_vr_not"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_vr_mode_off.png"
            style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
            tooltip="controlBar_dpadenterVRNotTip"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />

  <layer name="controlBar_dpadbtn_gyroscope_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          onclick="disableGyroscope();
"
          devices="html5"
          visible="false"
            tooltip="controlBar_dpadgyroOffTip"
          />
  <layer name="controlBar_dpadbtn_gyroscope_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          onclick="enableGyroscope();
"
          devices="html5"
            tooltip="controlBar_dpadgyroOnTip"
          visible="false"
          />
  <layer name="controlBar_dpadbtn_gyroscope_not"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope_off.png"
          style="controlBar_dpadbtn_vertical_style_off|controlBar_dpadbtn_vertical_style_alpha"
          enabled="true"
          capture="false"
          devices="html5"
            tooltip="controlBar_dpadgyroNotTip"
          visible="false"
          />


</layer>

  <action name="controlBar_dpadvertical_onout_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 0.2);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 0.2);
      set(layer[controlBar_dpadbtn_closefs].alpha, 0.2);
    );

    if(layer[controlBar_dpadbtn_enter_vr],
      set(layer[controlBar_dpadbtn_enter_vr].alpha, 0.2);
    );

  </action>

  <action name="controlBar_dpadvertical_onover_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 1);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 1);
      set(layer[controlBar_dpadbtn_closefs].alpha, 1);
    );

    if(layer[controlBar_dpadbtn_enter_vr],
      set(layer[controlBar_dpadbtn_enter_vr].alpha, 1);
    );

  </action>

  <action name="controlBar_dpadhorizontal_onout_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 0.2);





 
  </action>

  <action name="controlBar_dpadhorizontal_onover_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 1);






  </action>

  <style name="controlBar_dpadbtn_horizontal_style"
         keep="true"
         align="left"
         onhover="controlBar_dpadshowHorizontalMenuTooltip();"
         onout="hideTooltip();"
               crop="0| 0|30|30"
         onovercrop="0|30|30|30"
         ondowncrop="0|60|30|30"
         y="0"
         />
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

  <layer name="controlBar_dpadmenu_horizontal_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_horizontal.png"
          keep="true"
          align="bottomright"
          x="108"
          y="54"
          edge="right"
          zorder="4"
          scale9grid="10|12|40|3"
          style="controlBar_dpadmenu_bg_alpha"
          visible="false"
          />

  <layer name="controlBar_dpadmenu_horizontal_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_horizontal.png"
          keep="true"
          align="bottomright"
          x="108"
          y="54"
          edge="right"
          zorder="5"
          scale9grid="10|12|40|3"
          onout="controlBar_dpadhorizontal_onout_action();"
          onover="controlBar_dpadhorizontal_onover_action();"
          visible="false"
          >






  </layer>









	<events name="controlBar_dpadmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dpadupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dpadupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideFullscreenButtons">
		set(layer[controlBar_dpadbtn_openfs].visible , false);
		set(layer[controlBar_dpadbtn_closefs].visible, false);
	</action>
	<action name="controlBar_dpadShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dpadbtn_openfs].visible , false);
				set(layer[controlBar_dpadbtn_closefs].visible, true);
			,
				set(layer[controlBar_dpadbtn_openfs].visible ,true);
				set(layer[controlBar_dpadbtn_closefs].visible,false);
			);
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dpadupdateFullscreenButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowFullscreenButtons();
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	

<events name="controlBar_dpadvravailableevent"
		onvravailable="controlBar_dpadupdateVrButtonsAvailability();"
		onvrunavailable="controlBar_dpadupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano controlBar_dpadmenuvravailable="false" />
	<action name="controlBar_dpadupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(controlBar_dpadmenuvravailable, true);
		,
			set(controlBar_dpadmenuvravailable, false);
		);
		controlBar_dpadupdateVrButtons();
	</action>
	<action name="controlBar_dpadHideVrButtons">
		set(layer[controlBar_dpadbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, true);
		,
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="controlBar_dpadShowVrButtons">
		if (controlBar_dpadmenuvravailable,
			set(layer[controlBar_dpadbtn_enter_vr].visible, true);
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, false);
		,
			controlBar_dpadHideVrButtons(true);
		);
	</action>
	<action name="controlBar_dpadupdateVrButtons">
	if (tour_vrdevices,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowVrButtons();
		,
			controlBar_dpadHideVrButtons();
		);
	,
		if (controlBar_dpadIsOpened,
			controlBar_dpadHideVrButtons(true);
		,
			controlBar_dpadHideVrButtons();
		);
	);
	</action>

  <events name="controlBar_dpadbtngyroscopeavailableevents"
          ongyroscopeavailable="controlBar_dpadupdateGyroscopeButtonsAvailability();"
          ongyroscopeunavailable="controlBar_dpadupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="controlBar_dpadenableGyroscopeButtons(true);"
          ongyroscopeoff="controlBar_dpadenableGyroscopeButtons(false);"
          keep="true" devices="html5" />
  <krpano controlBar_dpadmenugyroscopeavailable="false"
          controlBar_dpadmenugyroscopeenabled="false"/>
  <action name="controlBar_dpadupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(controlBar_dpadmenugyroscopeavailable, true);
      controlBar_dpadupdateGyroscopeButtons();
    ,
      set(controlBar_dpadmenugyroscopeavailable, false);
      controlBar_dpadupdateGyroscopeButtons();
    );
  </action>
  <action name="controlBar_dpadenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(controlBar_dpadmenugyroscopeenabled, %1);
      controlBar_dpadupdateGyroscopeButtons();
    );
  </action>
	<action name="controlBar_dpadHideGyroscopeButtons">
		set(layer[controlBar_dpadbtn_gyroscope_off].visible, false);
		set(layer[controlBar_dpadbtn_gyroscope_on].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[controlBar_dpadbtn_gyroscope_not].visible, true);
		,
			set(layer[controlBar_dpadbtn_gyroscope_not].visible, false);
		);
	</action>
	<action name="controlBar_dpadShowGyroscopeButtons">
		if (controlBar_dpadmenugyroscopeavailable,
			if (controlBar_dpadmenugyroscopeenabled,
				set(layer[controlBar_dpadbtn_gyroscope_off].visible, true);
				set(layer[controlBar_dpadbtn_gyroscope_on].visible, false);
			,
				set(layer[controlBar_dpadbtn_gyroscope_off].visible, false);
				set(layer[controlBar_dpadbtn_gyroscope_on].visible, true);
			);
			set(layer[controlBar_dpadbtn_gyroscope_not].visible, false);
		,
			controlBar_dpadHideGyroscopeButtons(true);
		);
	</action>
	<action name="controlBar_dpadupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowGyroscopeButtons();
		,
			controlBar_dpadHideGyroscopeButtons();
		);
	,
		if (controlBar_dpadIsOpened,
			controlBar_dpadHideGyroscopeButtons(true);
		,
			controlBar_dpadHideGyroscopeButtons();
		);
	);
	</action>
	


<action name="controlBar_dpadhideMenuControls">
		set(controlBar_dpadIsOpened, false);
		set(layer[controlBar_dpadnavigation_bg].visible, false);
		
		
		set(layer[controlBar_dpadnavigation_bg_border].visible, true);
		tween(layer[controlBar_dpadnavigation_bg_border].alpha, 0.5, 1);
		
		
		if(controlBar_dpadverticalheight GT 0,
			set(layer[controlBar_dpadmenu_vertical_bg].visible, false);

				controlBar_dpadupdateGyroscopeButtons();


				controlBar_dpadupdateVrButtons();

				controlBar_dpadupdateFullscreenButtons();
			tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_vertical_bg_border].height , 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_vertical_bg_border].visible, false));
		);
		
		
		if(controlBar_dpadhorizontalwidth != 0,
			set(layer[controlBar_dpadmenu_horizontal_bg].visible, false);






			tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, false));
		);
	</action>
	
	<action name="controlBar_dpadshowMenuControls">
	set(controlBar_dpadIsOpened, true);
    set(layer[controlBar_dpadnavigation_bg].visible, true);


    set(layer[controlBar_dpadnavigation_bg_border].visible, true);
    tween(layer[controlBar_dpadnavigation_bg_border].alpha, 1, 1);

    
    if(controlBar_dpadverticalheight GT 0,
      set(layer[controlBar_dpadmenu_vertical_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadverticalheight), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_vertical_bg].visible, true);
        controlBar_dpadupdateFullscreenButtons();

        controlBar_dpadupdateVrButtons();


        controlBar_dpadupdateGyroscopeButtons();

      );
    );

    
    if(controlBar_dpadhorizontalwidth != 0,
      set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadhorizontalwidth), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_horizontal_bg].visible, true);








      );
    );
  </action>



  <action name="controlBar_dpadshowHorizontalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadhorizMenuTooltipStyle, bottom););
  </action>
  <action name="controlBar_dpadshowVerticalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadverticalMenuTooltipStyle, right););
  </action>

  <layer name="controlBar_dpadhorizMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x434343"
	bgalpha="1"
	bgborder="2.0 0xff7d00 1"
	mergedalpha="false"
	css="color:#ff7d00;font-family:Noto Sans;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	visible="false"
	html=""
	edge="bottom"
	yoffset="-10"
  />
  <layer name="controlBar_dpadverticalMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x434343"
	bgalpha="1"
	bgborder="2.0 0xff7d00 1"
	mergedalpha="false"
	css="color:#ff7d00;font-family:Noto Sans;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	yoffset="0"
	visible="false"
	html=""
	edge="right"
	xoffset="-10"
  />







<!-- ********** -->
<!-- Button -->
<!-- id : button -->
<!-- ********** -->
  <!-- EMPTY BUTTON : no image file -->
  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="false"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
</krpano>